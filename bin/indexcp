#!/usr/bin/env node

// Set CLI mode for filesystem storage
process.env.INDEXCP_CLI_MODE = 'true';

const IndexCPClient = require('../lib/client');
const { IndexCPServer } = require('../lib/server');
const path = require('path');
const fs = require('fs');

const args = process.argv.slice(2);
const command = args[0];

async function main() {
  if (!command) {
    showHelp();
    return;
  }

  switch (command) {
    case 'add':
      await handleAdd(args.slice(1));
      break;
    case 'upload':
      await handleUpload(args.slice(1));
      break;
    case 'server':
      await handleServer(args.slice(1));
      break;
    case 'help':
    case '--help':
    case '-h':
      showHelp();
      break;
    default:
      console.error(`Unknown command: ${command}`);
      showHelp();
      process.exit(1);
  }
}

async function handleAdd(args) {
  const filePath = args[0];
  
  if (!filePath) {
    console.error('Error: File path is required');
    console.log('Usage: indexedcp add <file-path>');
    process.exit(1);
  }

  if (!fs.existsSync(filePath)) {
    console.error(`Error: File not found: ${filePath}`);
    process.exit(1);
  }

  try {
    const client = new IndexCPClient();
    await client.addFile(filePath);
    console.log(`File ${filePath} successfully added to buffer`);
  } catch (error) {
    console.error('Error adding file:', error.message);
    process.exit(1);
  }
}

async function handleUpload(args) {
  let serverUrl = null;
  let apiKey = null;
  let filesToAdd = [];
  
  // Parse arguments
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    if (arg === '--api-key' && i + 1 < args.length) {
      apiKey = args[i + 1];
      console.warn('WARNING: Providing API key via command line is not recommended for security reasons.');
      console.warn('Consider setting the INDEXCP_API_KEY environment variable instead.');
      i++; // Skip the next argument since it's the API key value
    } else if (arg.startsWith('--api-key=')) {
      apiKey = arg.split('=', 2)[1];
      console.warn('WARNING: Providing API key via command line is not recommended for security reasons.');
      console.warn('Consider setting the INDEXCP_API_KEY environment variable instead.');
    } else if (!serverUrl) {
      serverUrl = arg;
    } else {
      // Any additional arguments are file paths to add and upload
      filesToAdd.push(arg);
    }
  }
  
  if (!serverUrl) {
    console.error('Error: Server URL is required');
    console.log('Usage: indexedcp upload <server-url> [--api-key <key>] [file1] [file2] ...');
    process.exit(1);
  }

  try {
    const client = new IndexCPClient({ apiKey });
    
    // Add any files specified on command line
    if (filesToAdd.length > 0) {
      console.log(`Adding ${filesToAdd.length} file(s) to buffer...`);
      for (const filePath of filesToAdd) {
        if (!fs.existsSync(filePath)) {
          console.error(`Error: File not found: ${filePath}`);
          process.exit(1);
        }
        await client.addFile(filePath);
        console.log(`  Added: ${filePath}`);
      }
    }
    
    const uploadResults = await client.uploadBufferedFiles(serverUrl);
    
    console.log('All buffered files uploaded successfully');
    
    // Display server filename mappings if any differ from client names
    if (uploadResults) {
      const differentFilenames = Object.entries(uploadResults).filter(
        ([clientName, serverName]) => serverName !== require('path').basename(clientName)
      );
      
      if (differentFilenames.length > 0) {
        console.log('\nServer-determined filenames:');
        differentFilenames.forEach(([clientName, serverName]) => {
          console.log(`  ${require('path').basename(clientName)} -> ${serverName}`);
        });
      }
    }
  } catch (error) {
    console.error('Error uploading files:', error.message);
    process.exit(1);
  }
}

async function handleServer(args) {
  let port = 3000;
  let outputDir = process.cwd();
  let apiKey = null;
  let pathMode = 'sanitize'; // default mode
  
  // Parse arguments
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    if (arg === '--api-key' && i + 1 < args.length) {
      apiKey = args[i + 1];
      console.warn('WARNING: Providing API key via command line is not recommended for security reasons.');
      console.warn('Consider setting the INDEXCP_API_KEY environment variable instead.');
      i++; // Skip the next argument since it's the API key value
    } else if (arg.startsWith('--api-key=')) {
      apiKey = arg.split('=', 2)[1];
      console.warn('WARNING: Providing API key via command line is not recommended for security reasons.');
      console.warn('Consider setting the INDEXCP_API_KEY environment variable instead.');
    } else if (arg === '--path-mode' && i + 1 < args.length) {
      pathMode = args[i + 1];
      if (!['sanitize', 'allow-paths', 'ignore'].includes(pathMode)) {
        console.error('ERROR: --path-mode must be one of: sanitize, allow-paths, ignore');
        process.exit(1);
      }
      i++; // Skip the next argument since it's the path mode value
    } else if (arg.startsWith('--path-mode=')) {
      pathMode = arg.split('=', 2)[1];
      if (!['sanitize', 'allow-paths', 'ignore'].includes(pathMode)) {
        console.error('ERROR: --path-mode must be one of: sanitize, allow-paths, ignore');
        process.exit(1);
      }
    } else if (!isNaN(parseInt(arg))) {
      port = parseInt(arg);
    } else {
      outputDir = arg;
    }
  }
  
  // Check environment variable for API key
  if (!apiKey && process.env.INDEXCP_API_KEY) {
    apiKey = process.env.INDEXCP_API_KEY;
    console.log('Using API key from INDEXCP_API_KEY environment variable');
  }
  
  try {
    const server = new IndexCPServer({ port, outputDir, apiKey, pathMode });
    console.log(`Path handling mode: ${pathMode}`);
    server.listen(port);
    
    // Handle graceful shutdown
    process.on('SIGINT', () => {
      console.log('\nShutting down server...');
      server.close();
      process.exit(0);
    });
  } catch (error) {
    console.error('Error starting server:', error.message);
    process.exit(1);
  }
}

function showHelp() {
  console.log(`
indexedcp - Secure, resumable file transfer with IndexedDB buffering

Usage:
  indexedcp add <file-path>                           Add a file to the buffer
  indexedcp upload <server-url> [--api-key <key>] [file1] [file2] ...
                                                      Upload buffered files to server
                                                      Optionally add files in the same command
  indexedcp server [port] [output-dir] [--api-key <key>] [--path-mode <mode>]
                                                      Start upload server (default port: 3000)
  indexedcp help                                      Show this help message

API Key Options:
  --api-key <key>     Specify API key (NOT recommended for security)
  Environment var:    Set INDEXCP_API_KEY environment variable (recommended)
  Auto-prompt:        If no API key provided, you will be prompted

Path Mode Options (Server):
  --path-mode ignore       (Default) Generate unique: <timestamp>_<random>_<full-path>.<ext>
                           Path separators → _, other special chars → -
  --path-mode sanitize     Strip all paths, use simple filenames with session tracking
  --path-mode allow-paths  Allow clients to create subdirectories (with security checks)

Examples:
  # Two-step workflow (add, then upload):
  indexedcp add ./myfile.txt
  indexedcp upload http://localhost:3000/upload
  
  # Single-step workflow (add and upload in one command):
  indexedcp upload http://localhost:3000/upload ./myfile.txt
  indexedcp upload http://localhost:3000/upload ./file1.txt ./file2.txt ./file3.txt
  
  # Start server with default settings (ignore mode - unique filenames):
  indexedcp server 3000 ./uploads
  
  # Start server with simple filenames (sanitize mode):
  indexedcp server 3000 ./uploads --path-mode sanitize
  
  # Start server allowing subdirectories (allow-paths mode):
  indexedcp server 3000 ./uploads --path-mode allow-paths
  
  # Using environment variable (recommended):
  export INDEXCP_API_KEY=your-api-key-here
  indexedcp upload http://localhost:3000/upload ./myfile.txt
  
  # Using command line (not recommended):
  indexedcp upload http://localhost:3000/upload --api-key your-key ./myfile.txt
`);
}

// Handle uncaught errors
process.on('unhandledRejection', (error) => {
  console.error('Unhandled error:', error.message);
  process.exit(1);
});

if (require.main === module) {
  main().catch((error) => {
    console.error('CLI error:', error.message);
    process.exit(1);
  });
}