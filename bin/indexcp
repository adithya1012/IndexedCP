#!/usr/bin/env node

// Set CLI mode for filesystem storage
process.env.INDEXCP_CLI_MODE = 'true';

const IndexCPClient = require('../lib/client');
const { IndexCPServer } = require('../lib/server');
const path = require('path');
const fs = require('fs');

const args = process.argv.slice(2);
const command = args[0];

async function main() {
  if (!command) {
    showHelp();
    return;
  }

  switch (command) {
    case 'add':
      await handleAdd(args.slice(1));
      break;
    case 'upload':
      await handleUpload(args.slice(1));
      break;
    case 'server':
      await handleServer(args.slice(1));
      break;
    case 'help':
    case '--help':
    case '-h':
      showHelp();
      break;
    default:
      console.error(`Unknown command: ${command}`);
      showHelp();
      process.exit(1);
  }
}

async function handleAdd(args) {
  const filePath = args[0];
  
  if (!filePath) {
    console.error('Error: File path is required');
    console.log('Usage: IndexedCP add <file-path>');
    process.exit(1);
  }

  if (!fs.existsSync(filePath)) {
    console.error(`Error: File not found: ${filePath}`);
    process.exit(1);
  }

  try {
    const client = new IndexCPClient();
    await client.addFile(filePath);
    console.log(`File ${filePath} successfully added to buffer`);
  } catch (error) {
    console.error('Error adding file:', error.message);
    process.exit(1);
  }
}

async function handleUpload(args) {
  let serverUrl = null;
  let apiKey = null;
  
  // Parse arguments
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    if (arg === '--api-key' && i + 1 < args.length) {
      apiKey = args[i + 1];
      console.warn('WARNING: Providing API key via command line is not recommended for security reasons.');
      console.warn('Consider setting the INDEXCP_API_KEY environment variable instead.');
      i++; // Skip the next argument since it's the API key value
    } else if (arg.startsWith('--api-key=')) {
      apiKey = arg.split('=', 2)[1];
      console.warn('WARNING: Providing API key via command line is not recommended for security reasons.');
      console.warn('Consider setting the INDEXCP_API_KEY environment variable instead.');
    } else if (!serverUrl) {
      serverUrl = arg;
    }
  }
  
  if (!serverUrl) {
    console.error('Error: Server URL is required');
    console.log('Usage: IndexedCP upload <server-url> [--api-key <key>]');
    process.exit(1);
  }

  try {
    const client = new IndexCPClient();
    if (apiKey) {
      client.apiKey = apiKey;
    }
    await client.uploadBufferedFiles(serverUrl);
    console.log('All buffered files uploaded successfully');
  } catch (error) {
    console.error('Error uploading files:', error.message);
    process.exit(1);
  }
}

async function handleServer(args) {
  let port = 3000;
  let outputDir = process.cwd();
  let apiKey = null;
  
  // Parse arguments
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    if (arg === '--api-key' && i + 1 < args.length) {
      apiKey = args[i + 1];
      console.warn('WARNING: Providing API key via command line is not recommended for security reasons.');
      console.warn('Consider setting the INDEXCP_API_KEY environment variable instead.');
      i++; // Skip the next argument since it's the API key value
    } else if (arg.startsWith('--api-key=')) {
      apiKey = arg.split('=', 2)[1];
      console.warn('WARNING: Providing API key via command line is not recommended for security reasons.');
      console.warn('Consider setting the INDEXCP_API_KEY environment variable instead.');
    } else if (!isNaN(parseInt(arg))) {
      port = parseInt(arg);
    } else {
      outputDir = arg;
    }
  }
  
  // Check environment variable for API key
  if (!apiKey && process.env.INDEXCP_API_KEY) {
    apiKey = process.env.INDEXCP_API_KEY;
    console.log('Using API key from INDEXCP_API_KEY environment variable');
  }
  
  try {
    const server = new IndexCPServer({ port, outputDir, apiKey });
    server.listen(port);
    
    // Handle graceful shutdown
    process.on('SIGINT', () => {
      console.log('\nShutting down server...');
      server.close();
      process.exit(0);
    });
  } catch (error) {
    console.error('Error starting server:', error.message);
    process.exit(1);
  }
}

function showHelp() {
  console.log(`
IndexedCP - Secure, resumable file transfer with IndexedDB buffering

Usage:
  IndexedCP add <file-path>                      Add a file to the buffer
  IndexedCP upload <server-url> [--api-key <key>]  Upload buffered files to server
  IndexedCP server [port] [output-dir] [--api-key <key>]  Start upload server (default port: 3000)
  IndexedCP help                                Show this help message

API Key Options:
  --api-key <key>     Specify API key (NOT recommended for security)
  Environment var:    Set INDEXCP_API_KEY environment variable (recommended)
  Auto-prompt:        If no API key provided, you will be prompted

Examples:
  IndexedCP add ./myfile.txt
  IndexedCP upload http://localhost:3000/upload
  IndexedCP server 3000 ./uploads
  
  # Using environment variable (recommended):
  export INDEXCP_API_KEY=your-api-key-here
  indexcp upload http://localhost:3000/upload
  
  # Using command line (not recommended):
  indexcp upload http://localhost:3000/upload --api-key your-key-here
`);
}

// Handle uncaught errors
process.on('unhandledRejection', (error) => {
  console.error('Unhandled error:', error.message);
  process.exit(1);
});

if (require.main === module) {
  main().catch((error) => {
    console.error('CLI error:', error.message);
    process.exit(1);
  });
}